{"version":3,"file":"static/js/778.f926d7e8.chunk.js","mappings":"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","sources":["redux/contacts/selectors.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Plug/Plug.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n    \n    const normalizedFilter = filter.query.toLowerCase();\n    const visibleContacts = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(normalizedFilter)\n    })\n    \n        return visibleContacts;\n    });\n","import { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operation';\n\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { Box, Button, FormControl, FormLabel, Input, Stack } from '@chakra-ui/react';\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.string().required(),\n    })\n    \nconst initialValues = {\n        name: '',\n        number: '',\n    }    \n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const name = e.target.name.value;\n    const number = e.target.number.value;\n    dispatch(addContact({\n      name,\n      number\n    }));\n    e.target.name.value = '';\n    e.target.number.value = '';\n  }\n  return (\n    <Box m=\"0 auto\" w='500px' p={5}>\n      <Formik initialValues={initialValues} validationSchema={schema}>\n        <Form autoComplete='off' onSubmit={handleSubmit}>\n          <FormControl isRequired>\n            <Stack mb='20px'>\n              <FormLabel>Name</FormLabel>\n              <Input name=\"name\" focusBorderColor='cyan.500' placeholder='Name' />\n              <FormLabel>Number</FormLabel>\n              <Input type=\"tel\" name=\"number\" focusBorderColor='cyan.500' placeholder='Number'\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses\" />\n            </Stack>\n            <Button type=\"submit\" colorScheme='cyan' display=\"block\" m='0 auto' color='white' style={{ textTransform: 'uppercase' }}>Add contact</Button>\n          </FormControl>\n        </Form>\n      </Formik>\n    </Box>\n  )\n};\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { deleteContact } from 'redux/contacts/operation';\nimport { ListItem, UnorderedList, Text, Box, Button } from '@chakra-ui/react';\n\nexport const ContactList = ({ contacts }) => {\n\n  const dispatch = useDispatch();\n\n  const handleDelete = (id) => {\n    dispatch(deleteContact(id))\n  };\n  \n  return (\n    <UnorderedList w='700px' m='0 auto'>\n      {contacts.map(({ id, name, number }, idx) => {\n        return <ListItem key={id} display='flex' justifyContent='space-between' alignItems='center' p={2}>\n          <Box display='flex'>\n            <Text fontSize='xl' as='b' color='cyan.500'>{idx + 1}.</Text>\n            <Text fontSize='xl' as='b' color='cyan.500'>\n              {name}:\n            </Text>\n          </Box>\n          <Box w='50%' display='flex' justifyContent='space-between' alignItems='center'>\n            <Text fontSize='xl' as='b' color='cyan.500'>\n            {number}\n          </Text>\n          <Button colorScheme='cyan' color='white' onClick={() => handleDelete(id)}>Удалить</Button>\n          </Box>\n          \n        </ListItem>\n      })}\n    </UnorderedList>\n  )\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport PropTypes from 'prop-types';\n\nimport { Flex, Input, Box } from '@chakra-ui/react'\n\nexport const Filter = ({ text }) => {\n    const dispatch = useDispatch();\n    \n    const handleChange = (e) => {\n        dispatch(setFilter(e.currentTarget.value));\n    }\n\n    return <Flex flexDirection=\"column\" alignItems=\"center\" w='500px' m='0 auto' p={5}>\n        <Box as='h2' color='cyan.500' fontSize='lg' fontWeight='bold' mb={5}>\n            {text}\n          </Box>\n        <Input placeholder='Find your contact...'\n               focusBorderColor='cyan.500'    \n            type=\"text\" name=\"find\" onChange={handleChange} /></Flex>\n}\n\nFilter.propTypes = {\n    text: PropTypes.string.isRequired,\n}","import { Box, Heading } from \"@chakra-ui/react\";\n\nexport const Plug = () => {\n    return (\n        <Box display='flex' justifyContent='center' padding='20px'>\n            <Heading as='h2' color='cyan.500'>Add your first friend!</Heading>\n        </Box>\n    )\n};","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { Box, Heading } from \"@chakra-ui/react\";\n\nimport { selectContacts, selectError, selectIsLoading, selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { Plug } from \"components/Plug/Plug\";\nimport { fetchContacts } from \"redux/contacts/operation\";\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    const contactsFilter = useSelector(selectVisibleContacts);\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    \n    useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n    return (\n        <Box w='1200px' m='0 auto'>\n            <Heading as='h2' size='3xl' textAlign='center' m='20px' color='cyan.500' style={{ textTransform: \"uppercase\" }}>Phonebook</Heading>\n            <ContactForm />\n            <Heading as='h3' textAlign='center' m='10px' color='cyan.500' style={{ textTransform: \"uppercase\" }}>Contacts</Heading>\n            <Filter text=\"Find contacts by name\" />\n            {isLoading && !error && <Loader />}\n            {contacts.length === 0 && !isLoading ? <Plug/> : <ContactList contacts={contactsFilter} />}\n        </Box>\n    )\n};\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","normalizedFilter","query","toLowerCase","contact","name","includes","schema","yup","shape","required","number","initialValues","ContactForm","dispatch","useDispatch","m","w","p","validationSchema","autoComplete","onSubmit","e","preventDefault","target","value","addContact","isRequired","mb","focusBorderColor","placeholder","type","pattern","title","colorScheme","display","color","style","textTransform","ContactList","map","idx","id","justifyContent","alignItems","fontSize","as","onClick","deleteContact","handleDelete","Filter","text","flexDirection","fontWeight","onChange","setFilter","currentTarget","Plug","padding","useSelector","contactsFilter","useEffect","fetchContacts","size","textAlign","Loader","length"],"sourceRoot":""}